service: rimac

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    APPOINTMENT_TABLE: AppointmentTable
    SNS_TOPIC: !Ref AppointmentTopic
    EVENT_BUS: AppointmentEventBus
    MYSQL_HOST: mydb.cluster-xxxx.us-east-1.rds.amazonaws.com
    MYSQL_USER: admin
    MYSQL_PASS: password123
    MYSQL_DB: appointments
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource: !GetAtt AppointmentTable.Arn
        - Effect: "Allow"
          Action: sns:Publish
          Resource: !Ref AppointmentTopic
        - Effect: "Allow"
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource:
            - !GetAtt ConfirmationsQueue.Arn
            - !GetAtt SQSPE.Arn
            - !GetAtt SQSCL.Arn
        - Effect: "Allow"
          Action: rds-data:ExecuteStatement
          Resource: arn:aws:rds:us-east-1:123456789012:cluster:appointments
        - Effect: "Allow"
          Action: events:PutEvents
          Resource: !GetAtt AppointmentEventBus.Arn

plugins:
  - serverless-esbuild
  - serverless-offline

package:
  individually: true

functions:
  appointment:
    handler: src/appointment/infrastructure/handler.main
    events:
      - httpApi:
          path: /appointments
          method: post
      - httpApi:
          path: /appointments/{insuredId}
          method: get
      - sqs:
          arn: !GetAtt ConfirmationsQueue.Arn

  appointmentPe:
    handler: src/appointment-processor/infrastructure/handlers/pe.main
    events:
      - sqs:
          arn: !GetAtt SQSPE.Arn

  appointmentCl:
    handler: src/appointment-processor/infrastructure/handlers/cl.main
    events:
      - sqs:
          arn: !GetAtt SQSCL.Arn

resources:
  Resources:
    AppointmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppointmentTable
        AttributeDefinitions:
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: scheduleId
            AttributeType: N
        KeySchema:
          - AttributeName: insuredId
            KeyType: HASH
          - AttributeName: scheduleId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AppointmentTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AppointmentTopic

    SQSPEDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE_DLQ
    
    SQSPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SQSPEDLQ.Arn
          maxReceiveCount: 5
    
    SQSCLDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL_DLQ

    SQSCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt SQSCLDLQ.Arn
          maxReceiveCount: 5
    
    SubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentTopic
        Endpoint: !GetAtt SQSPE.Arn
        FilterPolicy:
          countryISO:
            - "PE"

    SubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: !Ref AppointmentTopic
        Endpoint: !GetAtt SQSCL.Arn
        FilterPolicy:
          countryISO:
            - "CL"
    
    SQSPEPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSPE
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: !GetAtt SQSPE.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic

    SQSCLPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref SQSCL
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: sqs:SendMessage
              Resource: !GetAtt SQSCL.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AppointmentTopic

    ConfirmationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AppointmentConfirmations

    AppointmentEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: AppointmentEventBus
    
    ConfirmationsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref ConfirmationsQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt ConfirmationsQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt AppointmentRule.Arn

    AppointmentRule:
      Type: AWS::Events::Rule
      Properties:
        Name: AppointmentEventBusToQueueRule
        EventBusName: !Ref AppointmentEventBus
        EventPattern:
          source:
            - "appointment.pe"
            - "appointment.cl"
        Targets:
          - Id: "SendAllEventsToQueue"
            Arn: !GetAtt ConfirmationsQueue.Arn

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    target: node18
    platform: node
    concurrency: 10
    external:
      - '@nestjs/microservices'
      - '@nestjs/microservices/microservices-module'
      - '@nestjs/websockets'
      - '@nestjs/websockets/socket-module'
      - 'class-transformer'
      - 'class-transformer/storage'